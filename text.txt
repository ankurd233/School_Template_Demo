SASS: 

Full Form: Syntactically Awesome Style Sheetes
Also called extension to CSS and CSS Pre Processor

==============================<<>>==============================

Why SASS is Important:

1. Easy to Manage
2. Increase Coding Speed
3. Cross browser compatible

==============================<<>>==============================

How To USE SASS File:

1. We cant use SASS file in HTML
2. Browser can't understand SASS Code

==============================<<>>==============================

****SASS Compliler**** :

VS Code Extension
SASS to CSS

==============================<<>>==============================

Features Of SASS:

1. VARIABLES (VARIABLE DECLARE LIKE JAVASCRIPT)
2. NESTING (USING CSS PROPERIES IN SAME TAG AND CLASS)
3. PARTIALS AND IMPORTS (MANY SASS FILE IMPORT IN ONE SASS FILE)
4. MIXINS (USING FOR REUSABLE FEATURES IN CSS)
5. EXTENDS (USING FOR SAME CODES)
6. OPERATORS (ARITHMETIC OPERATORS)
7. FUNCTION (INBUILT FUNCTION FOR SHORTCUT AND ALSO YOU CAN CREATE FUCNTIONS)
8. CONDITIONAL DIRECTIVES ( USING FOR COMPLEX FEATURES LIKE IF ELSE(JAVASCRIPT))
9. LOOPS (SAME AS JAVASCRIPT)

==============================<<>>==============================

USING KOALA.EXE AS A SASS COMPILER

==============================<<>>==============================

SASS FEATURES :
---------------

1. SASS VARIABLES:

USING "$" TO CREATE VARIABLE. EX: $BG-COLOR: RED;

==============================<<>>==============================

2. SASS NESTING:

Example:

CSS Syntax:

nav ul{
    position: relative;
}

nav ul li{

    margin: 10px;
}

nav ul li a{

    color: red;
}

nav ul li a:hover{

    color:blue;
}

SCSS or SASS Syntax:

nav{
    background: green;
    
    ul{
    position: relative;

    li{

    margin: 10px;

    a{

    color: red;

    &:hover{

    color:blue;
                }
            }
        }   
    }
}



==============================<<>>==============================

3. PARTIALS AND IMPORTS

A> PARTIALS:

We can divide differenct parts of sub SCSS files and can include in main SCSS.
Eg: Partials files not a main SASS file. We need to include this in Main SASS file.
Partials should be include underscore (Eg: _header.scss , _footer.scss)

B> IMPORTS;

We can import any sub SCSS file by 

@import "sub SASS file name (Partials). We dont need to use underscore or extension when importing the SASS file.

Eg: @import "header"; @import "footer";


==============================<<>>==============================


4. MIXINS

Basically we can saved css properties by using MIXINS. then we can add this using "INCLUDE" keyword with Mixins name.
We can use MIXINS with parameter also without parameter..

Eg: Syntax of using Mixins:


We can include this property using include keyword..

Eg: .box{
    @include mixinName
}

.box{
    @include mixinName(Parameter name or values)
}

:Without parameter:

@mixin mixinName { 
    css Properties
}

:with parameter:

@mixin mixinName(Parameter name or values) {
    css Properties
}

Parameter should be a variable.

eg: @mixin box_shadow($frst, $second, $third, $fourth) {
    box-shadow: $frst $second $third $fourth
}

box{
    @include box_shadow(1xp, 2px, 0, #000)
}

You need to set a default value if you pass the parameter..
Eg: eg: @mixin box_shadow($frst:1px, $second:2px, $third:4px, $fourth:#0004) {
    box-shadow: $frst $second $third $fourth;
}

box{
    @include box_shadow() => they take only default value.
    if we give any value in parameter then value will be overwrite.
}

==============================<<>>==============================

5. EXTENDS

Basically Extends use for same code of line. You can Extends this code with @extend keyword. You dont need to write same codes repeatedly.

eg: 

First Method

.abc {
    color: red;
    height: 10px;
    width:20px;
    border-radius:5px
}

.xyz {
    color: green;
    @extend .abc (need to paste the class or Id with extend keyword)
}

Second and Best Method to use Extend

SCSS extends with Place holder (placeholder keyword is a Percentage(%))

eg:

You need to make a placeholder with css properties for using Extend. If we use % then (% name) not showing in your css class.
using for reusable codes but u cant pass the parameter in @extend. 

%abc {
    color: red;
    height: 10px;
    width:20px;
    border-radius:5px
}

.xyz {
    color: green;
    @extend %abc
}

==============================<<>>==============================

6. OPERATORS 

Operators basically five types.

a. Equality Operators (Using with if function)

if we use == and both side if same the it will be true otherwise false
if we use != and both side if not same the it will be false otherwise true


== Equal to
!= Not Equal to
Result should be True/False

------------------------------------<><><><>------------------------------------

b. Relational Operators

< Less Than
> Greater Than
<= Less than equals to
>= Greater than equals to


------------------------------------<><><><>------------------------------------


c. Numeric Operators (Using with only Numeric)

+ Addition
- Subtraction
* Multipication
/ Division
% Modulas or Remainder

------------------------------------<><><><>------------------------------------

d. String Operators

+ Concatenation (for adding String to string)

Eg: 10 + px = 10px

------------------------------------<><><><>------------------------------------

e. Boolean Operators (Result should be True or False)

Three type of Boolean Operators

1. And = if both conditions are true then TRUE else FALSE.

Eg: 

Condition 1 and Condition 2
10px == 10px and arial == "arial"; (Answer will be True)
if condition not matched then result should be False.

--------------------------<<<<<<<<<<>>>>>>>>>--------------------------

2. Or =  If either conditions are true then TRUE else FALSE (If one condition matched the result will be True).

Eg: 

Condition 1 and Condition 2
10px == 20px and arial == "arial"; (Answer will be True)
if both condition not matched then result should be False.

--------------------------<<<<<<<<<<>>>>>>>>>--------------------------

Not = Returns inly opposite value. (If answer is True the it will be false)



--------------------------<<<<<<<<<<>>>>>>>>>--------------------------







